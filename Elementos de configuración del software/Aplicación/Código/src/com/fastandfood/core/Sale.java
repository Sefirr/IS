package com.fastandfood.core;

import com.fastandfood.exceptions.ProductAmountException;
import com.fastandfood.exceptions.ProductNotFoundException;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * If one is creating a new Sale after a vendor has completed a transaction,
 * one must call the Constructor <code>Sale(ArrayList<Product> productList)</code>,
 * as one doesn't know the Id of the Sale before inserting it into the database.
 * (This value is autogenerated by the auto_increment field in the back-end)
 *
 * When getting data from the database to create a new Sale instance, one should use the second constructor,
 * as this Id is now retrieved from the database
 */
public class Sale {

    private int id = -1;
    private ArrayList<Product> _productList;
    private double _price;
    private boolean _finished;

    public Sale(ArrayList<Product> productList) {
        this._productList = productList;
        this._price = calculatePrice(this._productList);
        this._finished = false;
    }

    /* Use this constructor when calling data from the database, as it enables the use of the id */
    public Sale(int identifier, ArrayList<Product> productList, double price) {
        this.id = identifier;
        this._productList = productList;
        this._price = price;
        this._finished = true;
    }

    public Integer getId() {
        return (id != -1) ? id : null;
    }

    public double getPrice() {
        return _price;
    }

    public boolean isFinished() {
        return this._finished;
    }

    public void addProduct(int id, int amount) throws ProductNotFoundException {
        Product p = searchProduct(id);
        if(p == null)
            throw new ProductNotFoundException("El producto con identificador " + id + " no se encuentra en la venta.");

        p.setAmount(p.getAmount() + amount);
    }

    public void addProduct(int id, String productName,Product.Tag tag,
                           double price, int amount) throws ProductNotFoundException {

        addProduct(new Product(id, productName, tag, price, amount));
    }

    public void addProduct(Product product) throws ProductNotFoundException {
        Product p = searchProduct(product.getId());

        if(p != null)
            p.setAmount(p.getAmount() + product.getAmount());
        else
            this._productList.add(product);
    }

    public void removeProduct(int id) throws ProductNotFoundException {
        Product p = searchProduct(id);

        if(p == null)
            throw new ProductNotFoundException("El producto con identificador " + id + " no se encuentra en la venta.");

        _productList.remove(p);
    }

    public void removeProduct(int id, int amount) throws ProductAmountException, ProductNotFoundException {
        Product p = searchProduct(id);

        if(p == null)
            throw new ProductNotFoundException("El producto con identificador " + id + " no se encuentra en el almacÃ©n.");

        if((p.getAmount() != 0) && (p.getAmount() >= amount))
            p.setAmount(p.getAmount() - amount);
        else
            throw new ProductAmountException("El producto con identificador " + id + " se encuentra en una cantidad inferior a la que se pide en este pedido.");
    }

    private Product searchProduct(int id) {
        for(Product p : this._productList)
            if(p.getId() == id)
                return p;

        return null;
    }

    /* Devuelve la lista de productos*/
    public ArrayList<Product> getProducts() {
        return _productList;
    }

    public void finishSale() {
        if(_finished)
            return;
        this._price = calculatePrice(this._productList);
        this._finished = true;
    }

    private double calculatePrice(ArrayList<Product> productList) {
        double price = 0;
        for(Product p : productList)
            price += p.getAmount() * p.getPrice();

        return price;
    }

    @Override
    public String toString() {
        Iterator<Product> it = this._productList.iterator();
        StringBuilder sb = new StringBuilder();

        while(it.hasNext()) {
            Product p = it.next();
            sb.append("\n").append(p.toString());
        }

        return  "Id: " + getId()                                        + "\n" +
                "Productos:"                                            + "\n" +
                ((this._productList.size() != 0) ? sb.toString() : "-") + "\n" +
                "Subtotal: " + this._price                              + "\n";
    }
}
